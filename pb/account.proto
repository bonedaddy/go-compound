syntax = "proto3";

import "annotations.proto";
import "common.proto";

package API.Presidio;

/**
  * The request to the account API can specify a number filters, such
  * as which addresses to retrieve information about or general
  * health requirements. The following shows an example set of request
  * parameters in JSON:
  * <code>{
  *   "addresses": [] // returns all accounts if empty or not included
  *   "block_number": 0 // returns latest if given 0
  *   "max_health": { "value": "10.0" }
  *   "min_borrow_value_in_eth": { "value": "0.002" }
  *   "page_number": 1
  *   "page_size": 10
  * }</code>
  */
message AccountRequest {
    // List of account addresses to filter on, e.g.: ["0x...", ,"0x..."] [Optional]
    repeated bytes addresses = 1;
    // Filter for accounts which total outstanding borrows exceeding given amount. [Optional]
    Precise min_borrow_value_in_eth = 2;
    // Filter for accounts where outstanding borrows divided by collateral value is less than the provided amount.
    // If returned value is less than 1.0, for instance, the account is subject to liquidation. If provided,
    // should be given as `{ "value": "...string formatted number..." }` [Optional]
    Precise max_health = 3;
    // If provided, API returns data for given block number from our historical data. Otherwise, API defaults to returning the latest information. [Optional]
    uint32 block_number = 4 ;
    // If provided, API returns data for given timestamp from our historical data. Otherwise, API defaults to returning the latest information. [Optional]
    uint32 block_timestamp = 5;
    // Number of accounts to include in the response, default is 10 e.g. page_size=10 [Optional]
    uint32 page_size = 6;
    // Pagination number for accounts in the response, default is 1 e.g. page_number=1 [Optional]
    uint32 page_number = 7;
}

/**
  * This includes a list of cTokens contextualized to each account.
  * <code>{
  *   "address": "0xbac065be2e8ca097e9ac924e94af000dd3a5663"
  *   "health": { "value": "1.07264275673050348990755599431194797431802239523113293682619605751591901" }
  *   "tokens": [
  *     {
  *       "address": "0xf5dce57282a584d2746faf1593d3121fcac444dc"
  *       "borrow_balance_underlying": {"value": "131.4682716123015"}
  *       "lifetime_borrow_interest_accrued": {"value": "0.44430505829286"}
  *       "lifetime_supply_interest_accrued": {"value": "0.0000021671829864899976"}
  *       "supply_balance_underlying": {"value": "0.0"}
  *     }
  *   ],
  *   "total_borrow_value_in_eth": {"value": "0.5100157047140227313856015174794473200000000000000000000000000000" }
  *   "total_collateral_value_in_eth": {"value": "0.54706465148029978664135447293587201124121731200000000000000000000000000" }
  * }</code>
  */
message Account {
    // The public Ethereum address of the account
    bytes address = 1;

    // The value of all collateral supplied by the account. Calculated as <em>cTokens held • exchange rate • collateral factor</em>.
    // Note: assets can be supplied and gain interest without being counted as collateral.
    Precise total_collateral_value_in_eth = 2;

    // The value of all outstanding borrows with accumulated interest.
    Precise total_borrow_value_in_eth = 3;

    // <pre>total_collateral_value_in_eth / total_borrow_value_in_eth</pre>. If this value is less than 1.0, the account is subject to liquidation.
    Precise health = 5;

    //doc-false
    int32 block_updated = 6;

    // A list of tokens held by this account, see <ref>AccountCToken</ref> below for details.
    repeated AccountCToken tokens = 7;
}

/**
  * An account's supply, borrow, and interest information for a particular cToken.
  *
  * <code>{
  *   "address": "0xf5dce57282a584d2746faf1593d3121fcac444dc"
  *   "borrow_balance_underlying": {"value": "131.4682716123015"}
  *   "lifetime_borrow_interest_accrued": {"value": "0.44430505829286"}
  *   "lifetime_supply_interest_accrued": {"value": "0.0000021671829864899976"}
  *   "supply_balance_underlying": {"value": "0.0"}
  * }</code>
  */
message AccountCToken {
    // The address of the cToken
    bytes address = 1;

    // The symbol of the cToken
    string symbol = 2;

    // The cToken balance converted to underlying tokens <pre>cTokens held • exchange rate</pre>
    Precise supply_balance_underlying = 3;

    // The borrow balance (this is denominated in the underlying token, not in cTokens)
    Precise borrow_balance_underlying = 4;

    // The amount of supply interest accrued for the lifetime of this account-cToken pair.
    Precise lifetime_supply_interest_accrued = 5;

    // The amount of borrow interest accrued for the lifetime of this account-cToken pair.
    Precise lifetime_borrow_interest_accrued = 6;
}

/*
 * The account API returns an overall picture of accounts matching the filters on Compound.
 */
message AccountResponse {
    /* If set and non-zero, indicates an error returning data.
     * <pre>NO_ERROR = 0
     * INTERNAL_ERROR = 1
     * INVALID_PAGE_NUMBER = 2
     * INVALID_PAGE_SIZE = 3</pre>
     */
    Error error = 1;

    enum errorCodes {
        NO_ERROR = 0;
        INTERNAL_ERROR = 1;
        INVALID_PAGE_NUMBER = 2;
        INVALID_PAGE_SIZE = 3;
    }

    // The request parameters are echoed in the response.
    AccountRequest request = 2;

    /* For example
     * <pre>{
     *   "page_number": 1,
     *   "page_size": 100,
     *   "total_entries": 83,
     *   "total_pages": 1,
     * }</pre>
     */
    PaginationSummary pagination_summary = 3;

    /* The portion of an outstanding borrow that can be closed in a liquidation,
     * which is a percentage of the total underlying borrow balance. For example if the
     * close factor is 0.1, then an account in liqudation is liable to have 10% of its borrows
     * liquidated.
     */
    float close_factor = 4;

    /* The amount of extra collateral that will be seized to incentivize liquidation.
     * For example, an incentive of 1.05 implies that a liquidator will receive a 5%
     * bonus on the exchange of collateral during a liquidation
     */
    float liquidation_incentive = 5;

    // The list of accounts (see <ref>Account</ref> below) matching the requested filter,
    // with the associated account and cToken data.
    repeated Account accounts = 6;
}

/**
 * The Account API retrieves information for various accounts which have interacted with Compound.
 * You can use this API to pull data about a specific account by address, or alternatively,
 * pull data for a list of unhealthy accounts (that is, accounts which are approaching under-collateralization).
 * <code>// Retreives list of accounts and related supply and borrow balances.
 * fetch("API_BASE_URL/api/v2/account");
 *
 * // Returns details for given account
 * fetch("API_BASE_URL/api/v2/account?addresses[]=0x00..");</code>
 */
service AccountService {
    rpc account(AccountRequest) returns (AccountResponse) {
        option (google.api.http) = { get: "/account" };
    }

    rpc post_account(AccountRequest) returns (AccountResponse) {
        option (google.api.http) = { post: "/account" };
    }
}