// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: account.proto

package API_Presidio

import (
	bytes "bytes"
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type AccountResponseErrorCodes int32

const (
	AccountResponse_NO_ERROR            AccountResponseErrorCodes = 0
	AccountResponse_INTERNAL_ERROR      AccountResponseErrorCodes = 1
	AccountResponse_INVALID_PAGE_NUMBER AccountResponseErrorCodes = 2
	AccountResponse_INVALID_PAGE_SIZE   AccountResponseErrorCodes = 3
)

var AccountResponseErrorCodes_name = map[int32]string{
	0: "NO_ERROR",
	1: "INTERNAL_ERROR",
	2: "INVALID_PAGE_NUMBER",
	3: "INVALID_PAGE_SIZE",
}

var AccountResponseErrorCodes_value = map[string]int32{
	"NO_ERROR":            0,
	"INTERNAL_ERROR":      1,
	"INVALID_PAGE_NUMBER": 2,
	"INVALID_PAGE_SIZE":   3,
}

func (x AccountResponseErrorCodes) String() string {
	return proto.EnumName(AccountResponseErrorCodes_name, int32(x))
}

func (AccountResponseErrorCodes) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{3, 0}
}

//*
// The request to the account API can specify a number filters, such
// as which addresses to retrieve information about or general
// health requirements. The following shows an example set of request
// parameters in JSON:
// <code>{
//   "addresses": [] // returns all accounts if empty or not included
//   "block_number": 0 // returns latest if given 0
//   "max_health": { "value": "10.0" }
//   "min_borrow_value_in_eth": { "value": "0.002" }
//   "page_number": 1
//   "page_size": 10
// }</code>
type AccountRequest struct {
	// List of account addresses to filter on, e.g.: ["0x...", ,"0x..."] [Optional]
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	// Filter for accounts which total outstanding borrows exceeding given amount. [Optional]
	MinBorrowValueInEth *Precise `protobuf:"bytes,2,opt,name=min_borrow_value_in_eth,json=minBorrowValueInEth,proto3" json:"min_borrow_value_in_eth,omitempty"`
	// Filter for accounts where outstanding borrows divided by collateral value is less than the provided amount.
	// If returned value is less than 1.0, for instance, the account is subject to liquidation. If provided,
	// should be given as `{ "value": "...string formatted number..." }` [Optional]
	MaxHealth *Precise `protobuf:"bytes,3,opt,name=max_health,json=maxHealth,proto3" json:"max_health,omitempty"`
	// If provided, API returns data for given block number from our historical data. Otherwise, API defaults to returning the latest information. [Optional]
	BlockNumber uint32 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	// If provided, API returns data for given timestamp from our historical data. Otherwise, API defaults to returning the latest information. [Optional]
	BlockTimestamp uint32 `protobuf:"varint,5,opt,name=block_timestamp,json=blockTimestamp,proto3" json:"block_timestamp,omitempty"`
	// Number of accounts to include in the response, default is 10 e.g. page_size=10 [Optional]
	PageSize uint32 `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Pagination number for accounts in the response, default is 1 e.g. page_number=1 [Optional]
	PageNumber           uint32   `protobuf:"varint,7,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountRequest) Reset()      { *m = AccountRequest{} }
func (*AccountRequest) ProtoMessage() {}
func (*AccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{0}
}
func (m *AccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRequest.Merge(m, src)
}
func (m *AccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRequest proto.InternalMessageInfo

func (m *AccountRequest) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AccountRequest) GetMinBorrowValueInEth() *Precise {
	if m != nil {
		return m.MinBorrowValueInEth
	}
	return nil
}

func (m *AccountRequest) GetMaxHealth() *Precise {
	if m != nil {
		return m.MaxHealth
	}
	return nil
}

func (m *AccountRequest) GetBlockNumber() uint32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *AccountRequest) GetBlockTimestamp() uint32 {
	if m != nil {
		return m.BlockTimestamp
	}
	return 0
}

func (m *AccountRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *AccountRequest) GetPageNumber() uint32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

//*
// This includes a list of cTokens contextualized to each account.
// <code>{
//   "address": "0xbac065be2e8ca097e9ac924e94af000dd3a5663"
//   "health": { "value": "1.07264275673050348990755599431194797431802239523113293682619605751591901" }
//   "tokens": [
//     {
//       "address": "0xf5dce57282a584d2746faf1593d3121fcac444dc"
//       "borrow_balance_underlying": {"value": "131.4682716123015"}
//       "lifetime_borrow_interest_accrued": {"value": "0.44430505829286"}
//       "lifetime_supply_interest_accrued": {"value": "0.0000021671829864899976"}
//       "supply_balance_underlying": {"value": "0.0"}
//     }
//   ],
//   "total_borrow_value_in_eth": {"value": "0.5100157047140227313856015174794473200000000000000000000000000000" }
//   "total_collateral_value_in_eth": {"value": "0.54706465148029978664135447293587201124121731200000000000000000000000000" }
// }</code>
type Account struct {
	// The public Ethereum address of the account
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The value of all collateral supplied by the account. Calculated as <em>cTokens held • exchange rate • collateral factor</em>.
	// Note: assets can be supplied and gain interest without being counted as collateral.
	TotalCollateralValueInEth *Precise `protobuf:"bytes,2,opt,name=total_collateral_value_in_eth,json=totalCollateralValueInEth,proto3" json:"total_collateral_value_in_eth,omitempty"`
	// The value of all outstanding borrows with accumulated interest.
	TotalBorrowValueInEth *Precise `protobuf:"bytes,3,opt,name=total_borrow_value_in_eth,json=totalBorrowValueInEth,proto3" json:"total_borrow_value_in_eth,omitempty"`
	// <pre>total_collateral_value_in_eth / total_borrow_value_in_eth</pre>. If this value is less than 1.0, the account is subject to liquidation.
	Health *Precise `protobuf:"bytes,5,opt,name=health,proto3" json:"health,omitempty"`
	//doc-false
	BlockUpdated int32 `protobuf:"varint,6,opt,name=block_updated,json=blockUpdated,proto3" json:"block_updated,omitempty"`
	// A list of tokens held by this account, see <ref>AccountCToken</ref> below for details.
	Tokens               []*AccountCToken `protobuf:"bytes,7,rep,name=tokens,proto3" json:"tokens,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Account) Reset()      { *m = Account{} }
func (*Account) ProtoMessage() {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{1}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Account) GetTotalCollateralValueInEth() *Precise {
	if m != nil {
		return m.TotalCollateralValueInEth
	}
	return nil
}

func (m *Account) GetTotalBorrowValueInEth() *Precise {
	if m != nil {
		return m.TotalBorrowValueInEth
	}
	return nil
}

func (m *Account) GetHealth() *Precise {
	if m != nil {
		return m.Health
	}
	return nil
}

func (m *Account) GetBlockUpdated() int32 {
	if m != nil {
		return m.BlockUpdated
	}
	return 0
}

func (m *Account) GetTokens() []*AccountCToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

//*
// An account's supply, borrow, and interest information for a particular cToken.
//
// <code>{
//   "address": "0xf5dce57282a584d2746faf1593d3121fcac444dc"
//   "borrow_balance_underlying": {"value": "131.4682716123015"}
//   "lifetime_borrow_interest_accrued": {"value": "0.44430505829286"}
//   "lifetime_supply_interest_accrued": {"value": "0.0000021671829864899976"}
//   "supply_balance_underlying": {"value": "0.0"}
// }</code>
type AccountCToken struct {
	// The address of the cToken
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The symbol of the cToken
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The cToken balance converted to underlying tokens <pre>cTokens held • exchange rate</pre>
	SupplyBalanceUnderlying *Precise `protobuf:"bytes,3,opt,name=supply_balance_underlying,json=supplyBalanceUnderlying,proto3" json:"supply_balance_underlying,omitempty"`
	// The borrow balance (this is denominated in the underlying token, not in cTokens)
	BorrowBalanceUnderlying *Precise `protobuf:"bytes,4,opt,name=borrow_balance_underlying,json=borrowBalanceUnderlying,proto3" json:"borrow_balance_underlying,omitempty"`
	// The amount of supply interest accrued for the lifetime of this account-cToken pair.
	LifetimeSupplyInterestAccrued *Precise `protobuf:"bytes,5,opt,name=lifetime_supply_interest_accrued,json=lifetimeSupplyInterestAccrued,proto3" json:"lifetime_supply_interest_accrued,omitempty"`
	// The amount of borrow interest accrued for the lifetime of this account-cToken pair.
	LifetimeBorrowInterestAccrued *Precise `protobuf:"bytes,6,opt,name=lifetime_borrow_interest_accrued,json=lifetimeBorrowInterestAccrued,proto3" json:"lifetime_borrow_interest_accrued,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *AccountCToken) Reset()      { *m = AccountCToken{} }
func (*AccountCToken) ProtoMessage() {}
func (*AccountCToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{2}
}
func (m *AccountCToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountCToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCToken.Merge(m, src)
}
func (m *AccountCToken) XXX_Size() int {
	return m.Size()
}
func (m *AccountCToken) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCToken.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCToken proto.InternalMessageInfo

func (m *AccountCToken) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AccountCToken) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *AccountCToken) GetSupplyBalanceUnderlying() *Precise {
	if m != nil {
		return m.SupplyBalanceUnderlying
	}
	return nil
}

func (m *AccountCToken) GetBorrowBalanceUnderlying() *Precise {
	if m != nil {
		return m.BorrowBalanceUnderlying
	}
	return nil
}

func (m *AccountCToken) GetLifetimeSupplyInterestAccrued() *Precise {
	if m != nil {
		return m.LifetimeSupplyInterestAccrued
	}
	return nil
}

func (m *AccountCToken) GetLifetimeBorrowInterestAccrued() *Precise {
	if m != nil {
		return m.LifetimeBorrowInterestAccrued
	}
	return nil
}

//
// The account API returns an overall picture of accounts matching the filters on Compound.
type AccountResponse struct {
	// If set and non-zero, indicates an error returning data.
	// <pre>NO_ERROR = 0
	// INTERNAL_ERROR = 1
	// INVALID_PAGE_NUMBER = 2
	// INVALID_PAGE_SIZE = 3</pre>
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// The request parameters are echoed in the response.
	Request *AccountRequest `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	// For example
	// <pre>{
	//   "page_number": 1,
	//   "page_size": 100,
	//   "total_entries": 83,
	//   "total_pages": 1,
	// }</pre>
	PaginationSummary *PaginationSummary `protobuf:"bytes,3,opt,name=pagination_summary,json=paginationSummary,proto3" json:"pagination_summary,omitempty"`
	// The portion of an outstanding borrow that can be closed in a liquidation,
	// which is a percentage of the total underlying borrow balance. For example if the
	// close factor is 0.1, then an account in liqudation is liable to have 10% of its borrows
	// liquidated.
	CloseFactor float32 `protobuf:"fixed32,4,opt,name=close_factor,json=closeFactor,proto3" json:"close_factor,omitempty"`
	// The amount of extra collateral that will be seized to incentivize liquidation.
	// For example, an incentive of 1.05 implies that a liquidator will receive a 5%
	// bonus on the exchange of collateral during a liquidation
	LiquidationIncentive float32 `protobuf:"fixed32,5,opt,name=liquidation_incentive,json=liquidationIncentive,proto3" json:"liquidation_incentive,omitempty"`
	// The list of accounts (see <ref>Account</ref> below) matching the requested filter,
	// with the associated account and cToken data.
	Accounts             []*Account `protobuf:"bytes,6,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AccountResponse) Reset()      { *m = AccountResponse{} }
func (*AccountResponse) ProtoMessage() {}
func (*AccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e28828dcb8d24f0, []int{3}
}
func (m *AccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountResponse.Merge(m, src)
}
func (m *AccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountResponse proto.InternalMessageInfo

func (m *AccountResponse) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *AccountResponse) GetRequest() *AccountRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *AccountResponse) GetPaginationSummary() *PaginationSummary {
	if m != nil {
		return m.PaginationSummary
	}
	return nil
}

func (m *AccountResponse) GetCloseFactor() float32 {
	if m != nil {
		return m.CloseFactor
	}
	return 0
}

func (m *AccountResponse) GetLiquidationIncentive() float32 {
	if m != nil {
		return m.LiquidationIncentive
	}
	return 0
}

func (m *AccountResponse) GetAccounts() []*Account {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func init() {
	proto.RegisterEnum("API.Presidio.AccountResponseErrorCodes", AccountResponseErrorCodes_name, AccountResponseErrorCodes_value)
	proto.RegisterType((*AccountRequest)(nil), "API.Presidio.AccountRequest")
	proto.RegisterType((*Account)(nil), "API.Presidio.Account")
	proto.RegisterType((*AccountCToken)(nil), "API.Presidio.AccountCToken")
	proto.RegisterType((*AccountResponse)(nil), "API.Presidio.AccountResponse")
}

func init() { proto.RegisterFile("account.proto", fileDescriptor_8e28828dcb8d24f0) }

var fileDescriptor_8e28828dcb8d24f0 = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xee, 0xda, 0x8d, 0x9d, 0x3c, 0x3b, 0x69, 0x32, 0x25, 0xcd, 0x36, 0x6d, 0x16, 0x63, 0x90,
	0xb0, 0x84, 0x70, 0x44, 0x22, 0x71, 0xb7, 0x83, 0x4b, 0x2d, 0x15, 0x37, 0x1a, 0x27, 0x15, 0x42,
	0x82, 0xd1, 0x78, 0x77, 0x62, 0x8f, 0xba, 0x3b, 0xb3, 0xdd, 0x99, 0x0d, 0x4d, 0x4f, 0x08, 0xfe,
	0x04, 0xce, 0xdc, 0xe1, 0x3f, 0x40, 0xe2, 0x1f, 0x80, 0x1b, 0x12, 0x17, 0x8e, 0x8d, 0xc5, 0x1f,
	0xc0, 0x91, 0x23, 0xf2, 0xcc, 0xd8, 0xe4, 0xc7, 0x12, 0x2e, 0xdc, 0x3c, 0xdf, 0xf7, 0xbd, 0x6f,
	0xc6, 0xdf, 0x7b, 0x7e, 0x86, 0x55, 0x1a, 0x86, 0x32, 0x17, 0xba, 0x9d, 0x66, 0x52, 0x4b, 0x54,
	0xef, 0x1c, 0xf6, 0xdb, 0x87, 0x19, 0x53, 0x3c, 0xe2, 0x72, 0x7b, 0x83, 0x0a, 0x21, 0x35, 0xd5,
	0x5c, 0x0a, 0x65, 0x05, 0xdb, 0xf5, 0x50, 0x26, 0x89, 0x14, 0xee, 0xf4, 0xfe, 0x98, 0xeb, 0x49,
	0x3e, 0x6a, 0x87, 0x32, 0xd9, 0x1d, 0xcb, 0xb1, 0xdc, 0x35, 0xf0, 0x28, 0x3f, 0x31, 0x27, 0x73,
	0x30, 0x9f, 0xac, 0xbc, 0xf9, 0x43, 0x09, 0xd6, 0x3a, 0xf6, 0x3e, 0xcc, 0x5e, 0xe4, 0x4c, 0x69,
	0xf4, 0x10, 0x56, 0x68, 0x14, 0x65, 0x4c, 0x29, 0xa6, 0x7c, 0xaf, 0x51, 0x6e, 0xd5, 0xf1, 0x3f,
	0x00, 0xea, 0xc2, 0x56, 0xc2, 0x05, 0x19, 0xc9, 0x2c, 0x93, 0x5f, 0x92, 0x53, 0x1a, 0xe7, 0x8c,
	0x70, 0x41, 0x98, 0x9e, 0xf8, 0xa5, 0x86, 0xd7, 0xaa, 0xed, 0xd5, 0xdb, 0xee, 0xc1, 0x21, 0x57,
	0x0c, 0xdf, 0x4d, 0xb8, 0xe8, 0x1a, 0xed, 0xb3, 0x99, 0xb4, 0x2f, 0x7a, 0x7a, 0x82, 0xde, 0x03,
	0x48, 0xe8, 0x4b, 0x32, 0x61, 0x34, 0xd6, 0x13, 0xbf, 0x5c, 0x50, 0xb6, 0x92, 0xd0, 0x97, 0x8f,
	0x0d, 0x8d, 0xde, 0x82, 0xfa, 0x28, 0x96, 0xe1, 0x73, 0x22, 0xf2, 0x64, 0xc4, 0x32, 0xff, 0x76,
	0xc3, 0x6b, 0xad, 0xe2, 0x9a, 0xc1, 0x06, 0x06, 0x42, 0xef, 0xc2, 0x1d, 0x2b, 0xd1, 0x3c, 0x61,
	0x4a, 0xd3, 0x24, 0xf5, 0x97, 0x8c, 0x6a, 0xcd, 0xc0, 0x47, 0x73, 0x14, 0x3d, 0x80, 0x95, 0x94,
	0x8e, 0x19, 0x51, 0xfc, 0x15, 0xf3, 0x2b, 0x46, 0xb2, 0x3c, 0x03, 0x86, 0xfc, 0x15, 0x43, 0x6f,
	0x42, 0xcd, 0x90, 0xee, 0x9e, 0xaa, 0xa1, 0x61, 0x06, 0xd9, 0x6b, 0x9a, 0x3f, 0x95, 0xa0, 0xea,
	0xb2, 0x42, 0x3e, 0x54, 0x5d, 0x26, 0xbe, 0xd7, 0xf0, 0x5a, 0x75, 0x3c, 0x3f, 0xa2, 0x01, 0xec,
	0x68, 0xa9, 0x69, 0x4c, 0x42, 0x19, 0xc7, 0x54, 0xb3, 0x8c, 0xc6, 0xff, 0x1d, 0xd3, 0x7d, 0x53,
	0x72, 0xb0, 0xa8, 0xb8, 0x10, 0xd6, 0x23, 0xb0, 0x64, 0x61, 0xe4, 0x45, 0xd9, 0x6d, 0x1a, 0xf9,
	0xb5, 0xd0, 0xdf, 0x81, 0x8a, 0x0b, 0x7c, 0xa9, 0xa0, 0xc8, 0x71, 0xe8, 0x6d, 0x58, 0xb5, 0x51,
	0xe6, 0x69, 0x44, 0x35, 0x8b, 0x4c, 0x4a, 0x4b, 0xd8, 0xb6, 0xe0, 0xd8, 0x62, 0x68, 0x1f, 0x2a,
	0x5a, 0x3e, 0x67, 0x42, 0xf9, 0xd5, 0x46, 0xb9, 0x55, 0xdb, 0x7b, 0xd0, 0xbe, 0x38, 0xa3, 0x6d,
	0x97, 0xd1, 0xc1, 0xd1, 0x4c, 0x83, 0x9d, 0xb4, 0xf9, 0x4d, 0x19, 0x56, 0x2f, 0x31, 0x37, 0x64,
	0x78, 0x0f, 0x2a, 0xea, 0x2c, 0x19, 0xc9, 0xd8, 0x84, 0xb5, 0x82, 0xdd, 0x09, 0x3d, 0x86, 0xfb,
	0x2a, 0x4f, 0xd3, 0xf8, 0x8c, 0x8c, 0x68, 0x4c, 0x45, 0xc8, 0x48, 0x2e, 0x22, 0x96, 0xc5, 0x67,
	0x5c, 0x8c, 0x0b, 0xb3, 0xd8, 0xb2, 0xf2, 0xae, 0x55, 0x1f, 0x2f, 0xc4, 0x33, 0x27, 0x97, 0x67,
	0x81, 0xd3, 0xed, 0x22, 0x27, 0x2b, 0xbf, 0xee, 0x74, 0x0c, 0x8d, 0x98, 0x9f, 0xb0, 0xd9, 0xe8,
	0x11, 0xf7, 0x38, 0x2e, 0x34, 0xcb, 0x98, 0xd2, 0x84, 0x86, 0x61, 0x96, 0xb3, 0xa8, 0x30, 0xf1,
	0x9d, 0x79, 0xd5, 0xd0, 0x14, 0xf5, 0x5d, 0x4d, 0xc7, 0x96, 0x5c, 0xb2, 0x75, 0x2f, 0xbd, 0x66,
	0x5b, 0xb9, 0xc9, 0xd6, 0x0e, 0xc0, 0x15, 0xdb, 0xe6, 0x77, 0x65, 0xb8, 0xb3, 0xf8, 0xbd, 0xab,
	0x54, 0x0a, 0xc5, 0x50, 0x03, 0x96, 0x58, 0x96, 0xc9, 0xcc, 0x74, 0xa1, 0xb6, 0x07, 0xc6, 0xaf,
	0x37, 0x43, 0xb0, 0x25, 0xd0, 0x87, 0x50, 0xcd, 0xec, 0x76, 0x70, 0xd3, 0xfb, 0xb0, 0xb0, 0xe3,
	0x6e, 0x83, 0xe0, 0xb9, 0x18, 0xf5, 0x00, 0xa5, 0x74, 0xcc, 0x85, 0xd9, 0x57, 0x44, 0xe5, 0x49,
	0x42, 0xb3, 0x33, 0xd7, 0xa8, 0x7b, 0xd6, 0x62, 0x41, 0x0f, 0x2d, 0x8b, 0x37, 0xd2, 0xab, 0xd0,
	0x6c, 0x05, 0x84, 0xb1, 0x54, 0x8c, 0x9c, 0xd0, 0x50, 0x4b, 0xbb, 0x02, 0x4a, 0xb8, 0x66, 0xb0,
	0x47, 0x06, 0x42, 0xfb, 0xb0, 0x19, 0xf3, 0x17, 0x39, 0x8f, 0xec, 0x55, 0x5c, 0x84, 0x4c, 0x68,
	0x7e, 0xca, 0x4c, 0xf4, 0x25, 0xfc, 0xc6, 0x05, 0xb2, 0x3f, 0xe7, 0xd0, 0x07, 0xb0, 0xec, 0x76,
	0xad, 0xf2, 0x2b, 0x66, 0x92, 0x37, 0x8b, 0xbf, 0xd7, 0x42, 0xd6, 0xfc, 0x02, 0xc0, 0x44, 0x72,
	0x20, 0x23, 0xa6, 0x50, 0x1d, 0x96, 0x07, 0x4f, 0x49, 0x0f, 0xe3, 0xa7, 0x78, 0xfd, 0x16, 0x42,
	0xb0, 0xd6, 0x1f, 0x1c, 0xf5, 0xf0, 0xa0, 0xf3, 0xc4, 0x61, 0x1e, 0xda, 0x82, 0xbb, 0xfd, 0xc1,
	0xb3, 0xce, 0x93, 0xfe, 0x47, 0xe4, 0xb0, 0xf3, 0x71, 0x8f, 0x0c, 0x8e, 0x3f, 0xe9, 0xf6, 0xf0,
	0x7a, 0x09, 0x6d, 0xc2, 0xc6, 0x25, 0x62, 0xd8, 0xff, 0xac, 0xb7, 0x5e, 0xde, 0xfb, 0xc5, 0x5b,
	0xec, 0xe3, 0x21, 0xcb, 0x4e, 0x79, 0xc8, 0xd0, 0xa7, 0x50, 0x75, 0xd7, 0xa3, 0x1b, 0x63, 0xdf,
	0xde, 0xf9, 0x17, 0xd6, 0xb6, 0xb9, 0xb9, 0xfe, 0xf5, 0x6f, 0x7f, 0x7c, 0x5b, 0x02, 0xb4, 0xbc,
	0x3b, 0xb7, 0xfb, 0x1c, 0xea, 0xa9, 0xb4, 0xf3, 0xf4, 0xbf, 0xd9, 0x37, 0x17, 0xf6, 0xdd, 0xd6,
	0xef, 0xe7, 0xc1, 0xad, 0xd7, 0xe7, 0x81, 0xf7, 0xe7, 0x79, 0xe0, 0xfd, 0x75, 0x1e, 0x78, 0x5f,
	0x4d, 0x03, 0xef, 0xfb, 0x69, 0xe0, 0xfd, 0x38, 0x0d, 0xbc, 0x9f, 0xa7, 0x81, 0xf7, 0xeb, 0x34,
	0xf0, 0x5e, 0x4f, 0x03, 0x6f, 0x54, 0x31, 0x7f, 0x46, 0xfb, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0x7e, 0x62, 0x44, 0xfb, 0x06, 0x00, 0x00,
}

func (this *AccountRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AccountRequest)
	if !ok {
		that2, ok := that.(AccountRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AccountRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AccountRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AccountRequest but is not nil && this == nil")
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return fmt.Errorf("Addresses this(%v) Not Equal that(%v)", len(this.Addresses), len(that1.Addresses))
	}
	for i := range this.Addresses {
		if !bytes.Equal(this.Addresses[i], that1.Addresses[i]) {
			return fmt.Errorf("Addresses this[%v](%v) Not Equal that[%v](%v)", i, this.Addresses[i], i, that1.Addresses[i])
		}
	}
	if !this.MinBorrowValueInEth.Equal(that1.MinBorrowValueInEth) {
		return fmt.Errorf("MinBorrowValueInEth this(%v) Not Equal that(%v)", this.MinBorrowValueInEth, that1.MinBorrowValueInEth)
	}
	if !this.MaxHealth.Equal(that1.MaxHealth) {
		return fmt.Errorf("MaxHealth this(%v) Not Equal that(%v)", this.MaxHealth, that1.MaxHealth)
	}
	if this.BlockNumber != that1.BlockNumber {
		return fmt.Errorf("BlockNumber this(%v) Not Equal that(%v)", this.BlockNumber, that1.BlockNumber)
	}
	if this.BlockTimestamp != that1.BlockTimestamp {
		return fmt.Errorf("BlockTimestamp this(%v) Not Equal that(%v)", this.BlockTimestamp, that1.BlockTimestamp)
	}
	if this.PageSize != that1.PageSize {
		return fmt.Errorf("PageSize this(%v) Not Equal that(%v)", this.PageSize, that1.PageSize)
	}
	if this.PageNumber != that1.PageNumber {
		return fmt.Errorf("PageNumber this(%v) Not Equal that(%v)", this.PageNumber, that1.PageNumber)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AccountRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountRequest)
	if !ok {
		that2, ok := that.(AccountRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if !bytes.Equal(this.Addresses[i], that1.Addresses[i]) {
			return false
		}
	}
	if !this.MinBorrowValueInEth.Equal(that1.MinBorrowValueInEth) {
		return false
	}
	if !this.MaxHealth.Equal(that1.MaxHealth) {
		return false
	}
	if this.BlockNumber != that1.BlockNumber {
		return false
	}
	if this.BlockTimestamp != that1.BlockTimestamp {
		return false
	}
	if this.PageSize != that1.PageSize {
		return false
	}
	if this.PageNumber != that1.PageNumber {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Account) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Account)
	if !ok {
		that2, ok := that.(Account)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Account")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Account but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Account but is not nil && this == nil")
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if !this.TotalCollateralValueInEth.Equal(that1.TotalCollateralValueInEth) {
		return fmt.Errorf("TotalCollateralValueInEth this(%v) Not Equal that(%v)", this.TotalCollateralValueInEth, that1.TotalCollateralValueInEth)
	}
	if !this.TotalBorrowValueInEth.Equal(that1.TotalBorrowValueInEth) {
		return fmt.Errorf("TotalBorrowValueInEth this(%v) Not Equal that(%v)", this.TotalBorrowValueInEth, that1.TotalBorrowValueInEth)
	}
	if !this.Health.Equal(that1.Health) {
		return fmt.Errorf("Health this(%v) Not Equal that(%v)", this.Health, that1.Health)
	}
	if this.BlockUpdated != that1.BlockUpdated {
		return fmt.Errorf("BlockUpdated this(%v) Not Equal that(%v)", this.BlockUpdated, that1.BlockUpdated)
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return fmt.Errorf("Tokens this(%v) Not Equal that(%v)", len(this.Tokens), len(that1.Tokens))
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(that1.Tokens[i]) {
			return fmt.Errorf("Tokens this[%v](%v) Not Equal that[%v](%v)", i, this.Tokens[i], i, that1.Tokens[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Account) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Account)
	if !ok {
		that2, ok := that.(Account)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if !this.TotalCollateralValueInEth.Equal(that1.TotalCollateralValueInEth) {
		return false
	}
	if !this.TotalBorrowValueInEth.Equal(that1.TotalBorrowValueInEth) {
		return false
	}
	if !this.Health.Equal(that1.Health) {
		return false
	}
	if this.BlockUpdated != that1.BlockUpdated {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(that1.Tokens[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccountCToken) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AccountCToken)
	if !ok {
		that2, ok := that.(AccountCToken)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AccountCToken")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AccountCToken but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AccountCToken but is not nil && this == nil")
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return fmt.Errorf("Address this(%v) Not Equal that(%v)", this.Address, that1.Address)
	}
	if this.Symbol != that1.Symbol {
		return fmt.Errorf("Symbol this(%v) Not Equal that(%v)", this.Symbol, that1.Symbol)
	}
	if !this.SupplyBalanceUnderlying.Equal(that1.SupplyBalanceUnderlying) {
		return fmt.Errorf("SupplyBalanceUnderlying this(%v) Not Equal that(%v)", this.SupplyBalanceUnderlying, that1.SupplyBalanceUnderlying)
	}
	if !this.BorrowBalanceUnderlying.Equal(that1.BorrowBalanceUnderlying) {
		return fmt.Errorf("BorrowBalanceUnderlying this(%v) Not Equal that(%v)", this.BorrowBalanceUnderlying, that1.BorrowBalanceUnderlying)
	}
	if !this.LifetimeSupplyInterestAccrued.Equal(that1.LifetimeSupplyInterestAccrued) {
		return fmt.Errorf("LifetimeSupplyInterestAccrued this(%v) Not Equal that(%v)", this.LifetimeSupplyInterestAccrued, that1.LifetimeSupplyInterestAccrued)
	}
	if !this.LifetimeBorrowInterestAccrued.Equal(that1.LifetimeBorrowInterestAccrued) {
		return fmt.Errorf("LifetimeBorrowInterestAccrued this(%v) Not Equal that(%v)", this.LifetimeBorrowInterestAccrued, that1.LifetimeBorrowInterestAccrued)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AccountCToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountCToken)
	if !ok {
		that2, ok := that.(AccountCToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if !this.SupplyBalanceUnderlying.Equal(that1.SupplyBalanceUnderlying) {
		return false
	}
	if !this.BorrowBalanceUnderlying.Equal(that1.BorrowBalanceUnderlying) {
		return false
	}
	if !this.LifetimeSupplyInterestAccrued.Equal(that1.LifetimeSupplyInterestAccrued) {
		return false
	}
	if !this.LifetimeBorrowInterestAccrued.Equal(that1.LifetimeBorrowInterestAccrued) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccountResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*AccountResponse)
	if !ok {
		that2, ok := that.(AccountResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *AccountResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *AccountResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *AccountResponse but is not nil && this == nil")
	}
	if !this.Error.Equal(that1.Error) {
		return fmt.Errorf("Error this(%v) Not Equal that(%v)", this.Error, that1.Error)
	}
	if !this.Request.Equal(that1.Request) {
		return fmt.Errorf("Request this(%v) Not Equal that(%v)", this.Request, that1.Request)
	}
	if !this.PaginationSummary.Equal(that1.PaginationSummary) {
		return fmt.Errorf("PaginationSummary this(%v) Not Equal that(%v)", this.PaginationSummary, that1.PaginationSummary)
	}
	if this.CloseFactor != that1.CloseFactor {
		return fmt.Errorf("CloseFactor this(%v) Not Equal that(%v)", this.CloseFactor, that1.CloseFactor)
	}
	if this.LiquidationIncentive != that1.LiquidationIncentive {
		return fmt.Errorf("LiquidationIncentive this(%v) Not Equal that(%v)", this.LiquidationIncentive, that1.LiquidationIncentive)
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return fmt.Errorf("Accounts this(%v) Not Equal that(%v)", len(this.Accounts), len(that1.Accounts))
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return fmt.Errorf("Accounts this[%v](%v) Not Equal that[%v](%v)", i, this.Accounts[i], i, that1.Accounts[i])
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *AccountResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountResponse)
	if !ok {
		that2, ok := that.(AccountResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Error.Equal(that1.Error) {
		return false
	}
	if !this.Request.Equal(that1.Request) {
		return false
	}
	if !this.PaginationSummary.Equal(that1.PaginationSummary) {
		return false
	}
	if this.CloseFactor != that1.CloseFactor {
		return false
	}
	if this.LiquidationIncentive != that1.LiquidationIncentive {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(that1.Accounts[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *AccountRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&API_Presidio.AccountRequest{")
	s = append(s, "Addresses: "+fmt.Sprintf("%#v", this.Addresses)+",\n")
	if this.MinBorrowValueInEth != nil {
		s = append(s, "MinBorrowValueInEth: "+fmt.Sprintf("%#v", this.MinBorrowValueInEth)+",\n")
	}
	if this.MaxHealth != nil {
		s = append(s, "MaxHealth: "+fmt.Sprintf("%#v", this.MaxHealth)+",\n")
	}
	s = append(s, "BlockNumber: "+fmt.Sprintf("%#v", this.BlockNumber)+",\n")
	s = append(s, "BlockTimestamp: "+fmt.Sprintf("%#v", this.BlockTimestamp)+",\n")
	s = append(s, "PageSize: "+fmt.Sprintf("%#v", this.PageSize)+",\n")
	s = append(s, "PageNumber: "+fmt.Sprintf("%#v", this.PageNumber)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Account) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&API_Presidio.Account{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	if this.TotalCollateralValueInEth != nil {
		s = append(s, "TotalCollateralValueInEth: "+fmt.Sprintf("%#v", this.TotalCollateralValueInEth)+",\n")
	}
	if this.TotalBorrowValueInEth != nil {
		s = append(s, "TotalBorrowValueInEth: "+fmt.Sprintf("%#v", this.TotalBorrowValueInEth)+",\n")
	}
	if this.Health != nil {
		s = append(s, "Health: "+fmt.Sprintf("%#v", this.Health)+",\n")
	}
	s = append(s, "BlockUpdated: "+fmt.Sprintf("%#v", this.BlockUpdated)+",\n")
	if this.Tokens != nil {
		s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountCToken) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&API_Presidio.AccountCToken{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Symbol: "+fmt.Sprintf("%#v", this.Symbol)+",\n")
	if this.SupplyBalanceUnderlying != nil {
		s = append(s, "SupplyBalanceUnderlying: "+fmt.Sprintf("%#v", this.SupplyBalanceUnderlying)+",\n")
	}
	if this.BorrowBalanceUnderlying != nil {
		s = append(s, "BorrowBalanceUnderlying: "+fmt.Sprintf("%#v", this.BorrowBalanceUnderlying)+",\n")
	}
	if this.LifetimeSupplyInterestAccrued != nil {
		s = append(s, "LifetimeSupplyInterestAccrued: "+fmt.Sprintf("%#v", this.LifetimeSupplyInterestAccrued)+",\n")
	}
	if this.LifetimeBorrowInterestAccrued != nil {
		s = append(s, "LifetimeBorrowInterestAccrued: "+fmt.Sprintf("%#v", this.LifetimeBorrowInterestAccrued)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&API_Presidio.AccountResponse{")
	if this.Error != nil {
		s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	}
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	if this.PaginationSummary != nil {
		s = append(s, "PaginationSummary: "+fmt.Sprintf("%#v", this.PaginationSummary)+",\n")
	}
	s = append(s, "CloseFactor: "+fmt.Sprintf("%#v", this.CloseFactor)+",\n")
	s = append(s, "LiquidationIncentive: "+fmt.Sprintf("%#v", this.LiquidationIncentive)+",\n")
	if this.Accounts != nil {
		s = append(s, "Accounts: "+fmt.Sprintf("%#v", this.Accounts)+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringAccount(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountServiceClient interface {
	Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	PostAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
}

type accountServiceClient struct {
	cc *grpc.ClientConn
}

func NewAccountServiceClient(cc *grpc.ClientConn) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/API.Presidio.AccountService/account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) PostAccount(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/API.Presidio.AccountService/post_account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
type AccountServiceServer interface {
	Account(context.Context, *AccountRequest) (*AccountResponse, error)
	PostAccount(context.Context, *AccountRequest) (*AccountResponse, error)
}

func RegisterAccountServiceServer(s *grpc.Server, srv AccountServiceServer) {
	s.RegisterService(&_AccountService_serviceDesc, srv)
}

func _AccountService_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.Presidio.AccountService/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Account(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_PostAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).PostAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API.Presidio.AccountService/PostAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).PostAccount(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API.Presidio.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "account",
			Handler:    _AccountService_Account_Handler,
		},
		{
			MethodName: "post_account",
			Handler:    _AccountService_PostAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

func (m *AccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			dAtA[i] = 0xa
			i++
			i = encodeVarintAccount(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if m.MinBorrowValueInEth != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.MinBorrowValueInEth.Size()))
		n1, err := m.MinBorrowValueInEth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.MaxHealth != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.MaxHealth.Size()))
		n2, err := m.MaxHealth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.BlockNumber != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.BlockNumber))
	}
	if m.BlockTimestamp != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.BlockTimestamp))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.PageSize))
	}
	if m.PageNumber != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.PageNumber))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.TotalCollateralValueInEth != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.TotalCollateralValueInEth.Size()))
		n3, err := m.TotalCollateralValueInEth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.TotalBorrowValueInEth != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.TotalBorrowValueInEth.Size()))
		n4, err := m.TotalBorrowValueInEth.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Health != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.Health.Size()))
		n5, err := m.Health.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.BlockUpdated != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.BlockUpdated))
	}
	if len(m.Tokens) > 0 {
		for _, msg := range m.Tokens {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintAccount(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccountCToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCToken) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Symbol) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccount(dAtA, i, uint64(len(m.Symbol)))
		i += copy(dAtA[i:], m.Symbol)
	}
	if m.SupplyBalanceUnderlying != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.SupplyBalanceUnderlying.Size()))
		n6, err := m.SupplyBalanceUnderlying.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.BorrowBalanceUnderlying != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.BorrowBalanceUnderlying.Size()))
		n7, err := m.BorrowBalanceUnderlying.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.LifetimeSupplyInterestAccrued != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.LifetimeSupplyInterestAccrued.Size()))
		n8, err := m.LifetimeSupplyInterestAccrued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.LifetimeBorrowInterestAccrued != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.LifetimeBorrowInterestAccrued.Size()))
		n9, err := m.LifetimeBorrowInterestAccrued.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Error != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.Error.Size()))
		n10, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Request != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.Request.Size()))
		n11, err := m.Request.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.PaginationSummary != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAccount(dAtA, i, uint64(m.PaginationSummary.Size()))
		n12, err := m.PaginationSummary.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.CloseFactor != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CloseFactor))))
		i += 4
	}
	if m.LiquidationIncentive != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LiquidationIncentive))))
		i += 4
	}
	if len(m.Accounts) > 0 {
		for _, msg := range m.Accounts {
			dAtA[i] = 0x32
			i++
			i = encodeVarintAccount(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAccount(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedAccountRequest(r randyAccount, easy bool) *AccountRequest {
	this := &AccountRequest{}
	v1 := r.Intn(10)
	this.Addresses = make([][]byte, v1)
	for i := 0; i < v1; i++ {
		v2 := r.Intn(100)
		this.Addresses[i] = make([]byte, v2)
		for j := 0; j < v2; j++ {
			this.Addresses[i][j] = byte(r.Intn(256))
		}
	}
	if r.Intn(10) != 0 {
		this.MinBorrowValueInEth = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.MaxHealth = NewPopulatedPrecise(r, easy)
	}
	this.BlockNumber = uint32(r.Uint32())
	this.BlockTimestamp = uint32(r.Uint32())
	this.PageSize = uint32(r.Uint32())
	this.PageNumber = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAccount(r, 8)
	}
	return this
}

func NewPopulatedAccount(r randyAccount, easy bool) *Account {
	this := &Account{}
	v3 := r.Intn(100)
	this.Address = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Address[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		this.TotalCollateralValueInEth = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.TotalBorrowValueInEth = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Health = NewPopulatedPrecise(r, easy)
	}
	this.BlockUpdated = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.BlockUpdated *= -1
	}
	if r.Intn(10) != 0 {
		v4 := r.Intn(5)
		this.Tokens = make([]*AccountCToken, v4)
		for i := 0; i < v4; i++ {
			this.Tokens[i] = NewPopulatedAccountCToken(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAccount(r, 8)
	}
	return this
}

func NewPopulatedAccountCToken(r randyAccount, easy bool) *AccountCToken {
	this := &AccountCToken{}
	v5 := r.Intn(100)
	this.Address = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Address[i] = byte(r.Intn(256))
	}
	this.Symbol = string(randStringAccount(r))
	if r.Intn(10) != 0 {
		this.SupplyBalanceUnderlying = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.BorrowBalanceUnderlying = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LifetimeSupplyInterestAccrued = NewPopulatedPrecise(r, easy)
	}
	if r.Intn(10) != 0 {
		this.LifetimeBorrowInterestAccrued = NewPopulatedPrecise(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAccount(r, 7)
	}
	return this
}

func NewPopulatedAccountResponse(r randyAccount, easy bool) *AccountResponse {
	this := &AccountResponse{}
	if r.Intn(10) != 0 {
		this.Error = NewPopulatedError(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Request = NewPopulatedAccountRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PaginationSummary = NewPopulatedPaginationSummary(r, easy)
	}
	this.CloseFactor = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.CloseFactor *= -1
	}
	this.LiquidationIncentive = float32(r.Float32())
	if r.Intn(2) == 0 {
		this.LiquidationIncentive *= -1
	}
	if r.Intn(10) != 0 {
		v6 := r.Intn(5)
		this.Accounts = make([]*Account, v6)
		for i := 0; i < v6; i++ {
			this.Accounts[i] = NewPopulatedAccount(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedAccount(r, 7)
	}
	return this
}

type randyAccount interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAccount(r randyAccount) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAccount(r randyAccount) string {
	v7 := r.Intn(100)
	tmps := make([]rune, v7)
	for i := 0; i < v7; i++ {
		tmps[i] = randUTF8RuneAccount(r)
	}
	return string(tmps)
}
func randUnrecognizedAccount(r randyAccount, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAccount(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAccount(dAtA []byte, r randyAccount, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(key))
		v8 := r.Int63()
		if r.Intn(2) == 0 {
			v8 *= -1
		}
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(v8))
	case 1:
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAccount(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAccount(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *AccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, b := range m.Addresses {
			l = len(b)
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.MinBorrowValueInEth != nil {
		l = m.MinBorrowValueInEth.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.MaxHealth != nil {
		l = m.MaxHealth.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovAccount(uint64(m.BlockNumber))
	}
	if m.BlockTimestamp != 0 {
		n += 1 + sovAccount(uint64(m.BlockTimestamp))
	}
	if m.PageSize != 0 {
		n += 1 + sovAccount(uint64(m.PageSize))
	}
	if m.PageNumber != 0 {
		n += 1 + sovAccount(uint64(m.PageNumber))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.TotalCollateralValueInEth != nil {
		l = m.TotalCollateralValueInEth.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.TotalBorrowValueInEth != nil {
		l = m.TotalBorrowValueInEth.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Health != nil {
		l = m.Health.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.BlockUpdated != 0 {
		n += 1 + sovAccount(uint64(m.BlockUpdated))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountCToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.SupplyBalanceUnderlying != nil {
		l = m.SupplyBalanceUnderlying.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.BorrowBalanceUnderlying != nil {
		l = m.BorrowBalanceUnderlying.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.LifetimeSupplyInterestAccrued != nil {
		l = m.LifetimeSupplyInterestAccrued.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.LifetimeBorrowInterestAccrued != nil {
		l = m.LifetimeBorrowInterestAccrued.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.Request != nil {
		l = m.Request.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.PaginationSummary != nil {
		l = m.PaginationSummary.Size()
		n += 1 + l + sovAccount(uint64(l))
	}
	if m.CloseFactor != 0 {
		n += 5
	}
	if m.LiquidationIncentive != 0 {
		n += 5
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovAccount(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAccount(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccount(x uint64) (n int) {
	return sovAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AccountRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountRequest{`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`MinBorrowValueInEth:` + strings.Replace(fmt.Sprintf("%v", this.MinBorrowValueInEth), "Precise", "Precise", 1) + `,`,
		`MaxHealth:` + strings.Replace(fmt.Sprintf("%v", this.MaxHealth), "Precise", "Precise", 1) + `,`,
		`BlockNumber:` + fmt.Sprintf("%v", this.BlockNumber) + `,`,
		`BlockTimestamp:` + fmt.Sprintf("%v", this.BlockTimestamp) + `,`,
		`PageSize:` + fmt.Sprintf("%v", this.PageSize) + `,`,
		`PageNumber:` + fmt.Sprintf("%v", this.PageNumber) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Account) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Account{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`TotalCollateralValueInEth:` + strings.Replace(fmt.Sprintf("%v", this.TotalCollateralValueInEth), "Precise", "Precise", 1) + `,`,
		`TotalBorrowValueInEth:` + strings.Replace(fmt.Sprintf("%v", this.TotalBorrowValueInEth), "Precise", "Precise", 1) + `,`,
		`Health:` + strings.Replace(fmt.Sprintf("%v", this.Health), "Precise", "Precise", 1) + `,`,
		`BlockUpdated:` + fmt.Sprintf("%v", this.BlockUpdated) + `,`,
		`Tokens:` + strings.Replace(fmt.Sprintf("%v", this.Tokens), "AccountCToken", "AccountCToken", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountCToken) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountCToken{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Symbol:` + fmt.Sprintf("%v", this.Symbol) + `,`,
		`SupplyBalanceUnderlying:` + strings.Replace(fmt.Sprintf("%v", this.SupplyBalanceUnderlying), "Precise", "Precise", 1) + `,`,
		`BorrowBalanceUnderlying:` + strings.Replace(fmt.Sprintf("%v", this.BorrowBalanceUnderlying), "Precise", "Precise", 1) + `,`,
		`LifetimeSupplyInterestAccrued:` + strings.Replace(fmt.Sprintf("%v", this.LifetimeSupplyInterestAccrued), "Precise", "Precise", 1) + `,`,
		`LifetimeBorrowInterestAccrued:` + strings.Replace(fmt.Sprintf("%v", this.LifetimeBorrowInterestAccrued), "Precise", "Precise", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountResponse{`,
		`Error:` + strings.Replace(fmt.Sprintf("%v", this.Error), "Error", "Error", 1) + `,`,
		`Request:` + strings.Replace(fmt.Sprintf("%v", this.Request), "AccountRequest", "AccountRequest", 1) + `,`,
		`PaginationSummary:` + strings.Replace(fmt.Sprintf("%v", this.PaginationSummary), "PaginationSummary", "PaginationSummary", 1) + `,`,
		`CloseFactor:` + fmt.Sprintf("%v", this.CloseFactor) + `,`,
		`LiquidationIncentive:` + fmt.Sprintf("%v", this.LiquidationIncentive) + `,`,
		`Accounts:` + strings.Replace(fmt.Sprintf("%v", this.Accounts), "Account", "Account", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAccount(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, make([]byte, postIndex-iNdEx))
			copy(m.Addresses[len(m.Addresses)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBorrowValueInEth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinBorrowValueInEth == nil {
				m.MinBorrowValueInEth = &Precise{}
			}
			if err := m.MinBorrowValueInEth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxHealth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxHealth == nil {
				m.MaxHealth = &Precise{}
			}
			if err := m.MaxHealth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTimestamp", wireType)
			}
			m.BlockTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTimestamp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCollateralValueInEth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalCollateralValueInEth == nil {
				m.TotalCollateralValueInEth = &Precise{}
			}
			if err := m.TotalCollateralValueInEth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBorrowValueInEth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalBorrowValueInEth == nil {
				m.TotalBorrowValueInEth = &Precise{}
			}
			if err := m.TotalBorrowValueInEth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Health == nil {
				m.Health = &Precise{}
			}
			if err := m.Health.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUpdated", wireType)
			}
			m.BlockUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockUpdated |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &AccountCToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountCToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountCToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyBalanceUnderlying", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupplyBalanceUnderlying == nil {
				m.SupplyBalanceUnderlying = &Precise{}
			}
			if err := m.SupplyBalanceUnderlying.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowBalanceUnderlying", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BorrowBalanceUnderlying == nil {
				m.BorrowBalanceUnderlying = &Precise{}
			}
			if err := m.BorrowBalanceUnderlying.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifetimeSupplyInterestAccrued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LifetimeSupplyInterestAccrued == nil {
				m.LifetimeSupplyInterestAccrued = &Precise{}
			}
			if err := m.LifetimeSupplyInterestAccrued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LifetimeBorrowInterestAccrued", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LifetimeBorrowInterestAccrued == nil {
				m.LifetimeBorrowInterestAccrued = &Precise{}
			}
			if err := m.LifetimeBorrowInterestAccrued.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &Error{}
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Request == nil {
				m.Request = &AccountRequest{}
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaginationSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PaginationSummary == nil {
				m.PaginationSummary = &PaginationSummary{}
			}
			if err := m.PaginationSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CloseFactor", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CloseFactor = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationIncentive", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LiquidationIncentive = float32(math.Float32frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, &Account{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccount
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAccount
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccount
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccount(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAccount
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccount = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccount   = fmt.Errorf("proto: integer overflow")
)
